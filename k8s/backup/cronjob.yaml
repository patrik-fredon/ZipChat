apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  labels:
    app: backup
spec:
  schedule: '0 0 * * *' # Každý den o půlnoci
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: backup
              image: postgres:14-alpine
              command:
                - /bin/sh
                - -c
                - |
                  PGPASSWORD=$POSTGRES_PASSWORD pg_dump -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -F c -f /backup/backup_$(date +%Y%m%d_%H%M%S).dump
                  aws s3 cp /backup/*.dump s3://$S3_BUCKET/backups/ --recursive
                  rm -f /backup/*.dump
              env:
                - name: POSTGRES_HOST
                  valueFrom:
                    secretKeyRef:
                      name: database-credentials
                      key: host
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: database-credentials
                      key: user
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: database-credentials
                      key: password
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: database-credentials
                      key: database
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: aws-credentials
                      key: access-key
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: aws-credentials
                      key: secret-key
                - name: AWS_DEFAULT_REGION
                  value: eu-central-1
                - name: S3_BUCKET
                  value: zipchat-backups
              volumeMounts:
                - name: backup-volume
                  mountPath: /backup
          volumes:
            - name: backup-volume
              emptyDir: {}
          restartPolicy: OnFailure
